#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def PointInstancer "addpointinstancer1"
{
    int64[] invisibleIds = []
    quath[] orientations = [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)]
    point3f[] positions = [(-25, 0, -25), (-19.444445, 0, -25), (-13.888889, 0, -25), (-8.333334, 0, -25), (-2.7777786, 0, -25), (2.7777767, 0, -25), (8.333332, 0, -25), (13.8888855, 0, -25), (19.444443, 0, -25), (25, 0, -25), (-25, 0, -19.444445), (-19.444445, 0, -19.444445), (-13.888889, 0, -19.444445), (-8.333334, 0, -19.444445), (-2.7777786, 0, -19.444445), (2.7777767, 0, -19.444445), (8.333332, 0, -19.444445), (13.8888855, 0, -19.444445), (19.444443, 0, -19.444445), (25, 0, -19.444445), (-25, 0, -13.888889), (-19.444445, 0, -13.888889), (-13.888889, 0, -13.888889), (-8.333334, 0, -13.888889), (-2.7777786, 0, -13.888889), (2.7777767, 0, -13.888889), (8.333332, 0, -13.888889), (13.8888855, 0, -13.888889), (19.444443, 0, -13.888889), (25, 0, -13.888889), (-25, 0, -8.333334), (-19.444445, 0, -8.333334), (-13.888889, 0, -8.333334), (-8.333334, 0, -8.333334), (-2.7777786, 0, -8.333334), (2.7777767, 0, -8.333334), (8.333332, 0, -8.333334), (13.8888855, 0, -8.333334), (19.444443, 0, -8.333334), (25, 0, -8.333334), (-25, 0, -2.7777786), (-19.444445, 0, -2.7777786), (-13.888889, 0, -2.7777786), (-8.333334, 0, -2.7777786), (-2.7777786, 0, -2.7777786), (2.7777767, 0, -2.7777786), (8.333332, 0, -2.7777786), (13.8888855, 0, -2.7777786), (19.444443, 0, -2.7777786), (25, 0, -2.7777786), (-25, 0, 2.7777767), (-19.444445, 0, 2.7777767), (-13.888889, 0, 2.7777767), (-8.333334, 0, 2.7777767), (-2.7777786, 0, 2.7777767), (2.7777767, 0, 2.7777767), (8.333332, 0, 2.7777767), (13.8888855, 0, 2.7777767), (19.444443, 0, 2.7777767), (25, 0, 2.7777767), (-25, 0, 8.333332), (-19.444445, 0, 8.333332), (-13.888889, 0, 8.333332), (-8.333334, 0, 8.333332), (-2.7777786, 0, 8.333332), (2.7777767, 0, 8.333332), (8.333332, 0, 8.333332), (13.8888855, 0, 8.333332), (19.444443, 0, 8.333332), (25, 0, 8.333332), (-25, 0, 13.8888855), (-19.444445, 0, 13.8888855), (-13.888889, 0, 13.8888855), (-8.333334, 0, 13.8888855), (-2.7777786, 0, 13.8888855), (2.7777767, 0, 13.8888855), (8.333332, 0, 13.8888855), (13.8888855, 0, 13.8888855), (19.444443, 0, 13.8888855), (25, 0, 13.8888855), (-25, 0, 19.444443), (-19.444445, 0, 19.444443), (-13.888889, 0, 19.444443), (-8.333334, 0, 19.444443), (-2.7777786, 0, 19.444443), (2.7777767, 0, 19.444443), (8.333332, 0, 19.444443), (13.8888855, 0, 19.444443), (19.444443, 0, 19.444443), (25, 0, 19.444443), (-25, 0, 25), (-19.444445, 0, 25), (-13.888889, 0, 25), (-8.333334, 0, 25), (-2.7777786, 0, 25), (2.7777767, 0, 25), (8.333332, 0, 25), (13.8888855, 0, 25), (19.444443, 0, 25), (25, 0, 25)]
    int[] protoIndices = [0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]
    rel prototypes = [
        </addpointinstancer1/Prototypes/cube1>,
        </addpointinstancer1/Prototypes/sphere1>,
    ]

    def Scope "Prototypes"
    {
        def Sphere "sphere1"
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            double radius = 1
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "cube1"
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            double size = 2
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

